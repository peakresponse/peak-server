#!/usr/bin/env node

'use strict';

const fs = require('fs');
const path = require('path');
const tmp = require('tmp-promise');

const { download } = require('../lib/utils');

/// disable output logging in db config before loading
const config = require('../config/config');
config[process.env.NODE_ENV || 'development'].logging = false;
const models = require('../models');

async function parseStates(filePath) {
  let lines = fs.readFileSync(filePath).toString().split('\n');
  let isFirst = true;
  for (let line of lines) {
    if (isFirst) {
      isFirst = false;
      continue;
    }
    const parts = line.trim().split('|');
    if (parts.length < 4) {
      break;
    }
    process.stdout.write('.');
    const [id, , name, , borderStates] = parts;
    const [state] = await models.State.findOrBuild({ where: { id } });
    state.name = name;
    state.borderStates = borderStates.split(',').filter((s) => s.trim() !== '');
    await state.save();
  }
}

async function parseCounties(filePath) {
  let lines = fs.readFileSync(filePath).toString().split('\n');
  for (let line of lines) {
    const parts = line.trim().split(',');
    if (parts.length < 5) {
      break;
    }
    process.stdout.write('.');
    const [stateAbbr, stateCode, countyCode, name, classCode] = parts;
    const id = `${stateCode}${countyCode}`;
    const [county] = await models.County.findOrBuild({ where: { id, stateCode, countyCode } });
    county.stateAbbr = stateAbbr;
    county.name = name;
    county.classCode = classCode;
    await county.save();
  }
}

async function seed() {
  const tmpDir = await tmp.dir({ unsafeCleanup: true });
  try {
    /// parse and insert all the states
    const statePath = path.resolve(__dirname, '../lib/states.txt');
    console.log('Parsing and saving state data...');
    await parseStates(statePath);
    console.log('\n');

    /// download and seed county data
    const countyPath = path.resolve(tmpDir.path, 'county.txt');
    console.log('Downloading county data...');
    await download('https://www2.census.gov/geo/docs/reference/codes/files/national_county.txt', countyPath);
    console.log('Parsing and saving county data...');
    await parseCounties(countyPath);
    console.log('\n');

    console.log('Done!');
  } finally {
    models.sequelize.close();
    await tmpDir.cleanup();
  }
}

seed().then(() => process.exit(0));
