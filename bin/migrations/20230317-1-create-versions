#!/usr/bin/env node

const _ = require('lodash');
const { v4: uuidv4 } = require('uuid');
const models = require('../../models');

/* eslint-disable no-console, no-await-in-loop */
async function createVersions() {
  await models.sequelize.transaction(async (transaction) => {
    // create data set records as needed
    let caDataSet;
    let caSchematron;
    let waDataSet;
    let waSchematron;
    const agencies = await models.Agency.scope('claimed').findAll({ transaction });
    for (const agency of agencies) {
      if (!agency.versionId) {
        // fix some old records
        if (agency.data['sAgency.01']) {
          await agency.update(
            {
              data: {
                'dAgency.01': agency.data['sAgency.01'],
                'dAgency.02': agency.data['sAgency.02'],
                'dAgency.03': agency.data['sAgency.03'],
                'dAgency.04': {
                  _text: agency.stateId,
                },
              },
            },
            { transaction }
          );
        }
        if (agency.data?._attributes?.UUID) {
          const data = _.cloneDeep(agency.data);
          delete data._attributes.UUID;
          await agency.update({ data }, { transaction });
        }
        if (agency.data['dAgency.AgencyServiceGroup'] && !agency.data['dAgency.AgencyServiceGroup']?._attributes?.UUID) {
          const data = _.cloneDeep(agency.data);
          let groups = data['dAgency.AgencyServiceGroup'];
          if (!Array.isArray(groups)) {
            groups = [groups];
          }
          for (const group of groups) {
            if (!group?._attributes?.UUID) {
              _.set(group, ['_attributes', 'UUID'], uuidv4());
            }
          }
          await agency.update({ data }, { transaction });
        }
        if (agency.data['dAgency.AgencyYearGroup'] && !agency.data['dAgency.AgencyYearGroup']?._attributes?.UUID) {
          const data = _.cloneDeep(agency.data);
          let groups = data['dAgency.AgencyYearGroup'];
          if (!Array.isArray(groups)) {
            groups = [groups];
          }
          for (const group of groups) {
            if (!group?._attributes?.UUID) {
              _.set(group, ['_attributes', 'UUID'], uuidv4());
            }
          }
          await agency.update({ data }, { transaction });
        }
        // set NEMSIS and State Data Set versions
        let emsSchematronIds;
        if (agency.stateId === '06') {
          if (!caDataSet) {
            caDataSet = await models.NemsisStateDataSet.create(
              {
                stateId: '06',
                nemsisVersion: '3.5.0.211008CP3',
                version: '2023-02-15-c07d8f9168fa7ef218657360f7efe6f464bc9632',
                createdById: agency.createdById,
                updatedById: agency.updatedById,
              },
              { transaction }
            );
          }
          if (!caSchematron) {
            caSchematron = await models.NemsisSchematron.create(
              {
                stateId: '06',
                dataSet: 'EMSDataSet',
                nemsisVersion: '3.5.0.211008CP3',
                version: '2023-02-17-5d0e21eff095d115b7e58e3fc7c39a040a2a00b4',
                createdById: agency.createdById,
                updatedById: agency.updatedById,
              },
              { transaction }
            );
          }
          emsSchematronIds = [caSchematron.id];
          await agency.update(
            {
              nemsisVersion: agency.nemsisVersion ?? '3.5.0.211008CP3',
              stateDataSetId: agency.stateDataSetId ?? caDataSet.id,
            },
            { transaction }
          );
        } else if (agency.stateId === '53') {
          if (!waDataSet) {
            waDataSet = await models.NemsisStateDataSet.create(
              {
                stateId: '53',
                nemsisVersion: '3.5.0.191130CP1',
                version: '2022-11-14-a3125654bf5bfd4feee0363731000ff1a430aef8',
                createdById: agency.createdById,
                updatedById: agency.updatedById,
              },
              { transaction }
            );
          }
          if (!waSchematron) {
            waSchematron = await models.NemsisSchematron.create(
              {
                stateId: '53',
                dataSet: 'EMSDataSet',
                nemsisVersion: '3.5.0.191130CP1',
                version: '2023-01-25-42a113f2aee3d9072816f32e22ae6f35b250514e',
                createdById: agency.createdById,
                updatedById: agency.updatedById,
              },
              { transaction }
            );
          }
          emsSchematronIds = [waSchematron.id];
          await agency.update(
            {
              nemsisVersion: agency.nemsisVersion ?? '3.5.0.191130CP1',
              stateDataSetId: agency.stateDataSetId ?? waDataSet.id,
            },
            { transaction }
          );
        }
        const version = await models.Version.create(
          {
            agencyId: agency.id,
            isDraft: false,
            nemsisVersion: agency.nemsisVersion,
            stateDataSetId: agency.stateDataSetId,
            emsSchematronIds,
            createdById: agency.createdById,
            updatedById: agency.createdById,
          },
          { transaction }
        );
        await version.regenerate({ transaction });
        await agency.update({ versionId: version.id }, { transaction });
      }
    }
    const modelsToProcess = ['Vehicle'];
    for (const model of modelsToProcess) {
      const records = await models[model].findAll({
        include: 'createdByAgency',
        transaction,
      });
      for (const record of records) {
        const { versionId } = record.createdByAgency;
        await record.update({ versionId }, { transaction });
      }
    }
  });
}

createVersions()
  .then(() => console.log('Done!'))
  .catch((error) => console.error(error))
  .finally(() => models.sequelize.close());
