#!/usr/bin/env node

/**
 * Lists tested so far:
 *
 * bin/import-list admin@peakresponse.net https://nemsis.org/media/nemsis_v3/master/SuggestedLists/eSituation.09%20and%20eSituation.10%20-%20Symptoms.xlsx eSituation.09,eSituation.10 ICD10CM
 * bin/import-list admin@peakresponse.net https://nemsis.org/media/nemsis_v3/master/SuggestedLists/eSituation.11%20and%20eSituation.12%20-%20Provider%20Impression.xlsx eSituation.11,eSituation.12 ICD10CM
 * bin/import-list admin@peakresponse.net https://nemsis.org/media/nemsis_v3/master/SuggestedLists/eHistory.06%20-%20Medication%20Allergies%20-%20ICD10CM%20values.xlsx eHistory.06 ICD10CM 3
 * bin/import-list admin@peakresponse.net https://nemsis.org/media/nemsis_v3/master/SuggestedLists/eHistory.07%20-%20Environmental%20Food%20Allergies.xlsx eHistory.07 SNOMED
 * bin/import-list admin@peakresponse.net https://nemsis.org/media/nemsis_v3/master/SuggestedLists/eHistory.08%20-%20Medical%20Surgical%20History.xlsx eHistory.08 ICD10CM
 * bin/import-list admin@peakresponse.net https://nemsis.org/media/nemsis_v3/master/SuggestedLists/eMedications.03,%20dConfiguration.04,%20and%20dConfiguration.09%20-%20Medications.xlsx eMedications.03,dConfiguration.04,dConfiguration.09 MIX 3
 * bin/import-list admin@peakresponse.net https://nemsis.org/media/nemsis_v3/master/SuggestedLists/eProcedures.03,%20dConfiguration.03,%20dConfiguration.07%20-%20Procedures.xlsx eProcedures.03,dConfiguration.03,dConfiguration.07 SNOMED
 */

/* eslint-disable no-console, no-await-in-loop */
const fetch = require('node-fetch');
const fs = require('fs-extra');
const mkdirp = require('mkdirp');
const path = require('path');
const XLSX = require('xlsx');
const models = require('../models');

const { Op } = models.Sequelize;

if (process.argv.length < 5) {
  console.log(
    'Usage: bin/import-list superuser@email.com filename.xlsx field[,field,field] ICD10CM|SNOMED|RXNORM|MIX [3=no sections,4=sections (default)]'
  );
  process.exit(1);
}

const cols = parseInt(process.argv[6] || '4', 10);

function downloadWorkbook(url) {
  return new Promise((resolve, reject) => {
    mkdirp.sync(path.resolve(__dirname, '../tmp'));
    const filename = path.resolve(__dirname, '../tmp/file.xlsx');
    const file = fs.createWriteStream(filename);
    fetch(url)
      .then((response) => {
        response.body.on('end', () => {
          resolve(filename);
        });
        response.body.pipe(file);
      })
      .catch((err) => reject(err));
  });
}

async function importWorkbook() {
  // get the superuser that will be associated with the new records
  const superuser = await models.User.findOne({ where: { email: process.argv[2], isAdmin: true }, rejectOnEmpty: true });

  // find or create the list
  const fields = process.argv[4].split(',');
  const [list] = await models.List.findOrCreate({
    where: {
      fields: {
        [Op.eq]: fields,
      },
      agencyId: null,
    },
    defaults: {
      fields,
      createdById: superuser.id,
      updatedById: superuser.id,
    },
  });

  let system;
  switch (process.argv[5]) {
    case 'ICD10CM':
      system = '9924001';
      break;
    case 'SNOMED':
      system = '9924005';
      break;
    case 'RXNORM':
      system = '9924003';
      break;
    case 'MIX':
      break;
    default:
      throw new Error();
  }

  // download the file, if url
  let filename = process.argv[3];
  if (filename.startsWith('http')) {
    console.log('Downloading workbook...');
    filename = await downloadWorkbook(filename);
  }

  // start processing the first sheet in the workbook
  const workbook = XLSX.readFile(filename);
  const sheet = workbook.Sheets[workbook.SheetNames[0]];
  const rows = XLSX.utils.sheet_to_json(sheet, { header: 1 });
  let isHeaderFound = false;
  let section = null;
  for (const row of rows) {
    if (!isHeaderFound && row.length < cols - 1) {
      // eslint-disable-next-line no-continue
      continue;
    }
    if (process.argv[5] === 'MIX') {
      if (row[0]?.startsWith('EMS DESCRIPTION')) {
        isHeaderFound = true;
        switch (row[1].toUpperCase().trim()) {
          case 'ICD10CM':
            system = '9924001';
            break;
          case 'SNOMED':
            system = '9924005';
            break;
          case 'RXNORM':
            system = '9924003';
            break;
          default:
            throw new Error();
        }
        // eslint-disable-next-line no-continue
        continue;
      } else if (!isHeaderFound) {
        // eslint-disable-next-line no-continue
        continue;
      }
    }
    if (!isHeaderFound) {
      isHeaderFound = true;
      // eslint-disable-next-line no-continue
      continue;
    }
    let sectionName;
    let name;
    let code;
    if (cols === 3) {
      [name, code] = row;
    } else {
      [sectionName, name, code] = row;
    }
    if (sectionName) {
      [section] = await models.ListSection.findOrCreate({
        where: {
          listId: list.id,
          name: sectionName.trim(),
        },
        defaults: {
          createdById: superuser.id,
          updatedById: superuser.id,
        },
      });
    }
    if (name && code) {
      const [item] = await models.ListItem.findOrCreate({
        where: {
          listId: list.id,
          system,
          code: `${code}`.trim(),
        },
        defaults: {
          name: name.trim(),
          createdById: superuser.id,
          updatedById: superuser.id,
        },
      });
      item.sectionId = section?.id;
      item.name = name.trim();
      item.updatedById = superuser.id;
      await item.save();
    }
  }
}

importWorkbook()
  .then(() => {
    process.exit(0);
  })
  .catch((error) => {
    console.log(error);
    process.exit(1);
  });
